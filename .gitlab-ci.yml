image: rootproject/root-cc7

stages:
  - build
  - test
  - test_more
#  - pages

cache:
    key: ${CI_COMMIT_REF_SLUG}
    untracked: true
    paths:
    - run*.mid.lz4
    - run*.mid.gz
    - alphaStrips*offline.root
    - rootana
    - agana
    - simulation/submodules
    - BuildLog.txt
    - BuildSimLog.txt
    - LastBuildLog.txt
    - scripts/UnitTest/*.log
    - scripts/UnitTest/*.log.nopid
    - bin/

#Global before script (cc7)
before_script:
    #Set up ssh keys
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | wc -c
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa
    #Set up known hosts
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    #Set up EOS repo
    - echo -e "[eos-citrine]\nname=EOS 4.0 Version\nbaseurl=https://storage-ci.web.cern.ch/storage-ci/eos/citrine/tag/el-7/x86_64/\ngpgcheck=0\n" > /etc/yum.repos.d/eos.repo
    - echo -e "[eos-citrine-dep]\nname=EOS 4.0 Dependencies\nbaseurl=https://storage-ci.web.cern.ch/storage-ci/eos/citrine-depend/el-7/x86_64/\ngpgcheck=0\n" >> /etc/yum.repos.d/eos.repo
    #Set up root and dependancies
    #- . /cvmfs/sft.cern.ch/lcg/app/releases/ROOT/6.14.02/x86_64-centos7-gcc48-opt/root/bin/thisroot.sh
    #Set up agana environment variables
    - . agconfig.sh
    - yum install -y lesstif-devel libXmu libXmu-devel libXft libXft-devel eos-client valgrind tee wget svn libzstd

#build-ubuntu:
#  #Overwrite global image
#  image: rootproject/root-ubuntu16
#  stage: build
#  #Overwrite global before script
#  before_script:
#    #Set up agana environment variables
#    - . agconfig.sh
#    - echo 'deb [trusted=yes] http://mirrors.kernel.org/ubuntu bionic main universe' | sudo tee /etc/apt/sources.list > /dev/null
#    - sudo apt update
#    - sudo apt-get install -y x11proto-print-dev x11proto-fonts-dev x11proto-gl-dev x11proto-composite-dev x11proto-input-dev x11proto-core-dev libx11-6 libxau-dev libxpm-dev libmotif-dev libxt6 libxm4 libx11-dev libxext-dev libxmuu-dev
#    - echo 'deb [trusted=yes] http://security.ubuntu.com/ubuntu precise-security main' | sudo tee /etc/apt/sources.list > /dev/null
#    - sudo apt update
#    - sudo apt install -y libxp6 libxp-dev
#  script:
#    - echo "Building"
#    - make clean
#    - make 2>&1 | tee BuildLog.txt
#    - cd ..
#  cache:
#    untracked: true
#  artifacts:
#    when: on_failure
#    paths:
#      - BuildLog.txt
#      - ana/include/GitInfo.h

build-fedora:
  image: rootproject/root:6.20.06-fedora32
  stage: build
  before_script:
    #Set up root and dependancies
    #- . /cvmfs/sft.cern.ch/lcg/app/releases/ROOT/6.14.02/x86_64-fedora28-gcc81-opt/root/bin/thisroot.sh
    #Set up agana environment variables
    - . agconfig.sh
    - yum install -y openmotif-devel libXmu libXmu-devel valgrind root-spectrum root-graf3d
  script:
    - echo "Building"
    - rm -rf build bin
    - mkdir build
    - cd build
    - cmake ../
    - make
    - make install
  cache:
    untracked: true
  artifacts:
    when: on_failure
    paths:
      - BuildLog.txt
      - ana/include/GitInfo.h

build-fedora-clang:
  image: rootproject/root:6.20.06-fedora32
  stage: build
  before_script:
    #Set up root and dependancies
    #- . /cvmfs/sft.cern.ch/lcg/app/releases/ROOT/6.14.02/x86_64-fedora28-gcc81-opt/root/bin/thisroot.sh
    #Set up agana environment variables
    - . agconfig.sh
    - yum install -y openmotif-devel libXmu libXmu-devel valgrind clang root-spectrum root-graf3d
  script:
    - echo "Building"
    - export CC=/usr/bin/clang
    - export CXX=/usr/bin/clang++
    - rm -rf build bin
    - mkdir build
    - cd build
    - cmake ../
    - make
    - make install
  cache:
    untracked: true
  artifacts:
    when: on_failure
    paths:
      - BuildLog.txt
      - ana/include/GitInfo.h

build-cc7-cmake:
  stage: build
  script:
    - echo "Building"
    - rm -rf build bin
    - mkdir build
    - cd build
    - cmake3 ../
    - make
    - make install
  artifacts:
    when: on_failure
    paths:
      - BuildLog.txt
      - ana/include/GitInfo.h

build-cc7-cmake-ag:
  stage: build
  script:
    - echo "Building"
    - mkdir -p build
    - cd build
    - cmake3 ../ -DBUILD_AG_SIM=OFF -DBUILD_A2=OFF
    - make | tee ../BuildLog.txt
  artifacts:
    when: on_failure
    paths:
      - BuildLog.txt
      - ana/include/GitInfo.h

build-cc7-cmake-a2:
  stage: build
  script:
    - echo "Building"
    - mkdir -p build
    - cd build
    - cmake3 ../ -DBUILD_AG_SIM=OFF -DBUILD_A2=ON -DBUILD_AG=OFF
    - make | tee ../BuildLog.txt
  artifacts:
    when: on_failure
    paths:
      - BuildLog.txt
      - ana/include/GitInfo.h

build-cc7:
  stage: build
  script: 
    - echo "Building"
    - rm -rf rootana agana
    - git submodule update --init rootana
    - git submodule update --init --recursive agana 
    - make clean
    - make 2>&1 | tee BuildLog.txt
    - cd ..
  artifacts:
    when: on_failure
    paths:
      - BuildLog.txt
      - ana/include/GitInfo.h

#simulation:
#  stage: test_more
#  image: jmckenna/cc7_root6_geant4
#  script:
#    - . agconfig.sh install_sim | tee BuildSimLog.txt
#    - cd scripts/gitChecker
#    - ./SimChecker.sh
#    - cd -
#    - mkdir -p public
#    - cp -v simlogs/* public/
#  dependencies:
#    - test
#  artifacts:
#    when: on_success
#    paths:
#      - public
#      - variables
#    when: on_failure
#    paths:
#      - BuildSimLog.txt
#      - BuildLog.txt
#      - simlogs/*

test:
  stage: test
  script:
    - . agconfig.sh
    - cd scripts/gitChecker
    - rm -rf $AGRELEASE/ana/AutoPlots/*
    - ls -l $AGRELEASE/bin/*.exe
    - ls agcfmdb
    - ./RunChecker.sh
    - cd -
    - mkdir -p public
    - cp -v testlogs/* public/
  dependencies:
    - build-cc7-cmake
  artifacts:
    when: on_success
    paths:
    - public
    - variables
    when: on_failure
    paths:
    - BuildLog.txt
    - testlogs/agana_run*.log
    - testlogs/mt_agana_run*.log

testleakAg:
  stage: test_more
  script:
    - . agconfig.sh
    - cat variables
    - cd scripts/gitChecker
    - ./RunChecker_Part2.sh
  dependencies:
    - test
  artifacts:
    paths:
    - leaktest.log

testspeedAg:
  stage: test_more
  script:
    - . agconfig.sh
    - cat variables
    - cd scripts/gitChecker
    - ./RunChecker_Part3.sh
  dependencies:
    - test
  artifacts:
    paths:
    - callgrind.log


testleakA2:
  stage: test_more
  script:
    - . agconfig.sh
    - cat variables
    - cd scripts/gitChecker
    - ./RunChecker_Part2_A2.sh
  dependencies:
    - test
  artifacts:
    paths:
    - leaktest.log

testspeedA2:
  stage: test_more
  script:
    - . agconfig.sh
    - cat variables
    - cd scripts/gitChecker
    - ./RunChecker_Part3_A2.sh
  dependencies:
    - test
  artifacts:
    paths:
    - callgrind.log

#pages:
#  script:
#   - yum install -y doxygen
#   - doxygen Doxyfile &> Doxy.log
#   - tail -n 20 Doxy.log
#   - rm -rf public/Documentation
#   - mv Documentation/ public/
#  artifacts:
#    paths:
#    - public
