{
  std::cout<<"ROOT "<<gROOT->GetVersion()<<" on "<<gSystem->HostName()<<std::endl;
  
  std::cout<<"Including: @INC_PATH@ "<<std::endl;
  
  gSystem->AddIncludePath("@INC_PATH@");
  gSystem->AddIncludePath("@BIN_PATH@");
  gSystem->AddDynamicPath("@LIB_PATH@");

  gSystem->Load("libMinuit2");
  gSystem->Load("libGeom");

  TString libname("libagtpc.so");
  libname=gSystem->FindDynamicLibrary(libname);
  std::cout<<"Loading: "<<libname;
  int s=gSystem->Load( libname );
  if(s==0) std::cout<<"... ok"<<std::endl;
  else std::cout<<"Error!"<<std::endl;

  libname="libanalib.so";
  libname=gSystem->FindDynamicLibrary(libname);
  std::cout<<"Loading: "<<libname;
  s=gSystem->Load( libname );
  if(s==0) std::cout<<"... ok"<<std::endl;
  else std::cout<<"Error!"<<std::endl;

  libname="libalpha2.so";
  libname=gSystem->FindDynamicLibrary(libname);
  std::cout<<"Loading: "<<libname;
  s=gSystem->Load( libname );
  if(s==0) std::cout<<"... ok"<<std::endl;
  else std::cout<<"Error!"<<std::endl;

  libname="librootUtils.so";
  libname=gSystem->FindDynamicLibrary(libname);
  std::cout<<"Loading: "<<libname;
  s=gSystem->Load( libname );
  if(s==0) std::cout<<"... ok"<<std::endl;
  else std::cout<<"Error!"<<std::endl;

  gStyle->SetOptStat(1011111);
  //gStyle->SetPalette(kRainBow);
  //gStyle->SetPalette(kAurora);
  gStyle->SetPalette(kCool);
  //gStyle->SetPalette(kNeon);
  //gStyle->SetPalette(1);
  //gStyle->SetPalette(kRedBlue);
}